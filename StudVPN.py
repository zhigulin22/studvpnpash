import telebot
import uuid
import json
import paramiko
import logging
import asyncio
from telebot import types
from datetime import datetime, timedelta
from database_utils import create_database, add_user, format_subscription_end_time,add_device,get_user_referral_count,get_device_subscription_end_time, delete_user, delete_device, get_device_payment_status,get_device_uuid,update_device_status, update_referral_count,get_user_data,get_all_users,check_user_exists
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TELEGRAM_TOKEN = '7948987856:AAERs2G3QxGXKl2J8erLzrJpy5bDH39eHUg'
SERVER_IP = '77.239.100.20'
SERVER_PORT = 443  # –û–±—ã—á–Ω–æ 22 –¥–ª—è SSH
SERVER_USERNAME = 'root'
SERVER_PASSWORD = 'HX6qP0WlYzox'
CONFIG_FILE_PATH = '/usr/local/etc/xray/config.json'

bot = telebot.TeleBot(TELEGRAM_TOKEN)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

def get_vless_link(user_id,device_type):
    user_uuid_from_device=get_device_uuid(user_id,device_type)
    vless_link = f"vless://{user_uuid_from_device}@{SERVER_IP}:443?type=tcp&security=reality&fp=chrome&pbk=6zedx9tc-YP4Lyh8xFp6LtEvvmCB9iAtoNNc3tt5Ons&sni=whatsapp.com&sid=916e9946&spx=%2F&email={user_id}#StudVPN_{device_type}"

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ

    return vless_link


def generate_vless_link_for_buy(user_id,message_chat_id,device_type):
    user_uuid = get_device_uuid(user_id,device_type)
    vless_link = f"vless://{user_uuid}@{SERVER_IP}:443?type=tcp&security=reality&fp=chrome&pbk=6zedx9tc-YP4Lyh8xFp6LtEvvmCB9iAtoNNc3tt5Ons&sni=whatsapp.com&sid=916e9946&spx=%2F&email={user_id}#StudVPN_{device_type}"

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    update_server_config_for_buy(user_uuid,user_id,message_chat_id,device_type)

    return vless_link


def restart_xray(ssh):
    try:
        stdin, stdout, stderr = ssh.exec_command('systemctl restart xray')
        print(stdout.read().decode())
        print(stderr.read().decode())
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ Xray: {e}")

'''
#–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏
def update_server_config_for_buy(new_uuid,user_id,message_chat_id,device_type):
    user_uuid = get_user(user_id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cur_uuid = ""
    fl = 0

    if user and user["uuid"]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è UUID
        fl = 1
        cur_uuid = user["uuid"]  # –ï—Å–ª–∏ –µ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ


    # SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    try:
        ssh.connect(SERVER_IP, username=SERVER_USERNAME, password=SERVER_PASSWORD)
        sftp = ssh.open_sftp()

        with sftp.open(CONFIG_FILE_PATH, 'r') as config_file:
            config = json.load(config_file)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UUID –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if 'inbounds' in config:
            for inbound in config['inbounds']:
                if 'settings' in inbound and 'clients' in inbound['settings']:
                    if fl == 1:
                        for client in range(len(inbound['settings']['clients'])):
                            if inbound['settings']['clients'][client]['id'] == cur_uuid:
                                inbound['settings']['clients'][client]['id'] = new_uuid
                                break
                    else:
                        new_client = {
                            'id': new_uuid
                        }
                        inbound['settings']['clients'].append(new_client)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        with sftp.open(CONFIG_FILE_PATH, 'w') as config_file:
            json.dump(config, config_file, indent=4)

        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Xray –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        restart_xray(ssh)

        sftp.close()
        ssh.close()
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UUID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if fl == 0:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π
            if add_user(user_id, new_uuid):
                bot.send_message(message_chat_id, "–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            else:
                update_user_uuid(user_id, new_uuid)
                bot.send_message(message_chat_id, "–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        else:
            update_user_uuid(user_id, new_uuid)  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º uuid
            bot.send_message(message_chat_id, "–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
'''


#–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ
def update_server_config_for_buy(new_uuid,user_id,message_chat_id,device_type):
    # SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    try:
        ssh.connect(SERVER_IP, username=SERVER_USERNAME, password=SERVER_PASSWORD)
        sftp = ssh.open_sftp()

        with sftp.open(CONFIG_FILE_PATH, 'r') as config_file:
            config = json.load(config_file)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UUID –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if 'inbounds' in config:
            for inbound in config['inbounds']:
                if 'settings' in inbound and 'clients' in inbound['settings']:
                        new_client = {
                            'id': new_uuid
                        }
                        inbound['settings']['clients'].append(new_client)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        with sftp.open(CONFIG_FILE_PATH, 'w') as config_file:
            json.dump(config, config_file, indent=4)

        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Xray –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        restart_xray(ssh)

        sftp.close()
        ssh.close()
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UUID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")




@bot.message_handler(commands=['start'])
def start(message):
    welcome_message = (
        "–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à–µ–º –í–ü–ù \n\n"
        "üöÄ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π VPN —É –≤–∞—Å –ø–æ–¥ —Ä—É–∫–æ–π! üîí\n\n"
        "–ó–∞–±—É–¥—å—Ç–µ –æ –ø–ª–æ—Ö–æ –∑–∞–≥—Ä—É–∂–∞—é—â–∏—Ö—Å—è –≤–∏–¥–µ–æ –∏ –ø–ª–æ—Ö–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏.\n\n"
        "–° –Ω–∞—à–∏–º –±–æ—Ç–æ–º —É –≤–∞—Å –±—É–¥–µ—Ç: \n"
        "*   –°–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å\n"
        "*   –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö\n"
        "*   –£–¥–æ–±–Ω—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n"
        "*   –ó–∞—â–∏—Ç–∞ –≤ –ø—É–±–ª–∏—á–Ω—ã—Ö Wi-Fi —Å–µ—Ç—è—Ö"
    )
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º user_id
    if not check_user_exists(user_id):
        add_user(user_id, 0)
        add_device(user_id, 1,"iPhone",False,"None")
        add_device(user_id, 2, "Mac", False, "None")
        add_device(user_id, 3, "Android", False, "None")
        add_device(user_id, 4, "Windows", False, "None")
    # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å VPN", callback_data='buy_vpn')
    button2 = types.InlineKeyboardButton("–ú–æ–π VPN", callback_data='my_vpn')
    button3 = types.InlineKeyboardButton("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data='referral')
    button4 = types.InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support')
    markup.add(button1, button2)
    markup.add(button3, button4)

    bot.send_message(message.chat.id, welcome_message, reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å VPN"
@bot.callback_query_handler(func=lambda call: call.data == "buy_vpn")
def buy_vpn(call):
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("iPhone", callback_data='iPhone')
    button2 = types.InlineKeyboardButton("Android", callback_data='Android')
    button3 = types.InlineKeyboardButton("Mac", callback_data='Mac')
    button4 = types.InlineKeyboardButton("Windows", callback_data='Windows')
    button5 = types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')
    markup.add(button1, button2)
    markup.add(button3, button4)
    markup.add(button5)
    bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –í–ü–ù:", call.message.chat.id, call.message.message_id, reply_markup=markup)



@bot.callback_query_handler(func=lambda call: call.data in ["iPhone", "Android", "Mac", "Windows"])
def choose_mod(call):
    device = call.data
    user_id = call.from_user.id
    user_status_device = get_device_payment_status(user_id, device)
    if user_status_device == True:
        bot.send_message(call.message.chat.id, f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è {device}.")
        user_endtime_device = get_device_subscription_end_time(user_id, device)
        bot.send_message(call.message.chat.id, f"–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {device}: {user_endtime_device}")
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='proceed_subscription')
        button2 = types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')
        markup.add(button1)
        markup.add(button2)
        bot.send_message(call.message.chat.id, "–•–æ—Ç–∏—Ç–µ –µ–µ –ø—Ä–æ–¥–ª–∏—Ç—å?", reply_markup=markup)
    else:
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("1 –º–µ—Å—è—Ü - 99‚ÇΩ", callback_data=f'1month|{device}')
        button2 = types.InlineKeyboardButton("3 –º–µ—Å—è—Ü–∞ - 259‚ÇΩ", callback_data=f'3month|{device}')
        button3 = types.InlineKeyboardButton("6 –º–µ—Å—è—Ü–µ–≤ - 499‚ÇΩ", callback_data=f'6month|{device}')
        button4 = types.InlineKeyboardButton("12 –º–µ—Å—è—Ü–µ–≤ - 999‚ÇΩ", callback_data=f'12month|{device}')
        button5 = types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')
        markup.add(button1, button2)
        markup.add(button3, button4)
        markup.add(button5)

        bot.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {device}. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:", call.message.chat.id, call.message.message_id, reply_markup=markup)



@bot.callback_query_handler(func=lambda call: call.data.startswith("1month") or call.data.startswith("3month") or call.data.startswith("6month") or call.data.startswith("12month"))
def choose_subscription_duration_mounth(call):
    data = call.data.split("|")
    subscription_duration = data[0]
    device = data[1]
    cur_time = 0
    user_id = call.from_user.id  #
    if subscription_duration == "1month": cur_time = 30
    elif subscription_duration == "3month": cur_time = 90
    elif subscription_duration == "6month": cur_time = 180
    elif subscription_duration == "12month": cur_time = 360
    user_status_device = get_device_payment_status(user_id, device)
    if (user_status_device == False):
        cur_time_end = datetime.now() + timedelta(days=cur_time)
        device_uuid = get_device_uuid(user_id, device)
        update_device_status(device_uuid, device, cur_time_end)
        markup = types.InlineKeyboardMarkup()
        button2 = types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')
        markup.add(button2)
        bot.send_message(call.message.chat.id, f"–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: ", reply_markup=markup)

        #–æ–ø–ª–∞—Ç–∞

        vless_link = generate_vless_link_for_buy(user_id,call.message.chat.id,device)
        bot.send_message(call.message.chat.id, f"–í–∞—à–∞ VLESS —Å—Å—ã–ª–∫–∞ –¥–ª—è {device}:")
        bot.send_message(call.message.chat.id, vless_link)
        user_endtime_device = format_subscription_end_time(get_device_subscription_end_time(user_id, device))
        markup = types.InlineKeyboardMarkup()
        button2 = types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')
        markup.add(button2)
        bot.send_message(call.message.chat.id, f"–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {device}: {user_endtime_device}",reply_markup=markup)
        update_device_status(device_uuid, True, user_endtime_device)
    else:
        bot.send_message(call.message.chat.id, f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è {device}." )
        user_endtime_device = format_subscription_end_time(get_device_subscription_end_time(user_id, device))
        bot.send_message(call.message.chat.id, f"–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {device}: {user_endtime_device}")
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='proceed_subscription')
        button2 = types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')
        markup.add(button1)
        markup.add(button2)
        bot.send_message(call.message.chat.id, "–•–æ—Ç–∏—Ç–µ –µ–µ –ø—Ä–æ–¥–ª–∏—Ç—å?", reply_markup=markup)

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ù–∞–∑–∞–¥"
@bot.callback_query_handler(func=lambda call: call.data == "main_menu")
def back_to_main_menu(call):
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å VPN", callback_data='buy_vpn')
    button2 = types.InlineKeyboardButton("–ú–æ–π VPN", callback_data='my_vpn')
    button3 = types.InlineKeyboardButton("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data='referral')
    button4 = types.InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support')
    markup.add(button1, button2)
    markup.add(button3, button4)
    sms="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: "
    bot.send_message(call.message.chat.id,sms, reply_markup=markup)

#–í—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data == "my_vpn")
def my_vpn(call):
    user_id = call.from_user.id
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("iPhone", callback_data=f'iPhone|{user_id}')
    button2 = types.InlineKeyboardButton("Android", callback_data=f'Android|{user_id}')
    button3 = types.InlineKeyboardButton("Mac", callback_data=f'Mac|{user_id}')
    button4 = types.InlineKeyboardButton("Windows", callback_data=f'Windows|{user_id}')
    button5 = types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')
    markup.add(button1, button2)
    markup.add(button3, button4)
    markup.add(button5)
    bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Å–≤–æ–π –∫–ª—é—á:", call.message.chat.id,call.message.message_id, reply_markup=markup)




#–í—ã–±–æ—Ä —Å—Ä–æ–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data == "proceed_subscription")
def my_vpn(call):
    device = call.data
    user_id = call.from_user.id
    user_status_device = get_device_payment_status(user_id, device)
    if user_status_device == True:
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("iPhone", callback_data=f'iPhone|con')
        button2 = types.InlineKeyboardButton("Android", callback_data=f'Android|con')
        button3 = types.InlineKeyboardButton("Mac", callback_data=f'Mac|con')
        button4 = types.InlineKeyboardButton("Windows", callback_data=f'Windows|con')
        button5 = types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')
        markup.add(button1, button2)
        markup.add(button3, button4)
        markup.add(button5)
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å —Å–≤–æ–π –∫–ª—é—á:", call.message.chat.id,call.message.message_id, reply_markup=markup)
    else:
        markup = types.InlineKeyboardMarkup()


@bot.callback_query_handler(func=lambda call: call.data.startswith("iPhone") or call.data.startswith("Mac") or call.data.startswith("Android") or call.data.startswith("Windows"))
def choose_subscription_duration_mounth(call):
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("1 –º–µ—Å—è—Ü - 99‚ÇΩ", callback_data=f'1month|{device}')
    button2 = types.InlineKeyboardButton("3 –º–µ—Å—è—Ü–∞ - 259‚ÇΩ", callback_data=f'3month|{device}')
    button3 = types.InlineKeyboardButton("6 –º–µ—Å—è—Ü–µ–≤ - 499‚ÇΩ", callback_data=f'6month|{device}')
    button4 = types.InlineKeyboardButton("12 –º–µ—Å—è—Ü–µ–≤ - 999‚ÇΩ", callback_data=f'12month|{device}')
    button5 = types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')
    markup.add(button1, button2)
    markup.add(button3, button4)
    markup.add(button5)

    bot.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {device}. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:", call.message.chat.id,call.message.message_id, reply_markup=markup)


#–£–∑–Ω–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –í–ü–ù
@bot.callback_query_handler(func=lambda call: call.data.startswith("iPhone") or call.data.startswith("Mac") or call.data.startswith("Android") or call.data.startswith("Windows"))
def choose_subscription_duration_mounth(call):
    data = call.data.split("|")
    device = data[0]
    us = data[1]
    user_id=call.from_user.id
    user_payment_status_device=get_device_payment_status(user_id, device)
    if user_payment_status_device == True:
        user_endtime_device = format_subscription_end_time(get_device_subscription_end_time(user_id, device))
        current_link = get_vless_link(user_id, device)
        bot.send_message(call.message.chat.id, f"–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è {device}: ")
        bot.send_message(call.message.chat.id, current_link)
        bot.send_message(call.message.chat.id, f"–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {device}: {user_endtime_device}")
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='proceed_subscription')
        button2 = types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')
        markup.add(button1)
        markup.add(button2)
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    else:
        bot.send_message(call.message.chat.id, f"–£ –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–∞ –¥–ª—è {device}")
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å VPN", callback_data='buy_vpn')
        button2 = types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')
        markup.add(button1)
        markup.add(button2)
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)




#–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞
@bot.callback_query_handler(func=lambda call: call.data == "referral")
def referral_program(call):
    user_name = call.from_user.username
    referral_link = f"https://t.me/studvpn666_bot?start={user_name}"
    bot.send_message(call.message.chat.id, f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {referral_link}")
    markup = types.InlineKeyboardMarkup()
    button1=types.InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –∫–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", callback_data='col_ref')
    button2 = types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')
    markup.add(button1)
    markup.add(button2)
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "col_ref")
def referral_program(call):
    user_id = call.from_user.id
    user_col_ref=get_user_referral_count(user_id)
    bot.send_message(call.message.chat.id, f"–ö–æ–ª-–≤–æ —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ –∫—É–ø–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ: {user_col_ref}")
    bot.send_message(call.message.chat.id,f"–í–∞–º –±—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ –∑–∞ —ç—Ç–æ: {user_col_ref*5} –¥–Ω–µ–π")
    markup = types.InlineKeyboardMarkup()
    button2 = types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu',reply_markup=markup)
    markup.add(button2)




#–ü–æ–¥–¥–µ—Ä–∂–∫–∞
@bot.callback_query_handler(func=lambda call: call.data == "support")
def support(call):
    bot.send_message(call.message.chat.id, "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.")
    bot.send_message(call.message.chat.id, "–í–∞–º –æ—Ç–≤–µ—Ç–∏—Ç –ø–µ—Ä–≤—ã–π –æ—Å–≤–æ–±–æ–¥–∏–≤—à–∏–π—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä")
    markup = types.InlineKeyboardMarkup()
    button2 = types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')
    markup.add(button2)
    bot.send_message(call.message.chat.id, "@StudVPN_Support", reply_markup=markup)


@bot.message_handler(commands=['help'])
def help_command(message):
    bot.send_message(message.chat.id, """
        –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç. 
        
–í–∞–º –æ—Ç–≤–µ—Ç–∏—Ç –ø–µ—Ä–≤—ã–π –æ—Å–≤–æ–±–æ–¥–∏–≤—à–∏–π—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä

@StudVPN_Support
    """)


def setup_menu():
    commands = [
        types.BotCommand("start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        types.BotCommand("help", "–ü–æ–º–æ—â—å")
    ]
    try:
       bot.set_my_commands(commands)
       logging.info("–ö–æ–º–∞–Ω–¥—ã –º–µ–Ω—é —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
setup_menu()
create_database()
bot.polling(none_stop=True, interval=0)