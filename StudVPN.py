import telebot
import uuid
import json
import paramiko
from telebot import types
from datetime import datetime, timedelta
from database_utils import init_db, add_user, get_user, update_user_uuid, update_user_payment_status, update_user_referral_count, update_user_subscription_end_time,format_subscription_end_time
from button_pay import back_to_main_menu,choose_subscription_duration
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TELEGRAM_TOKEN = '7948987856:AAERs2G3QxGXKl2J8erLzrJpy5bDH39eHUg'
SERVER_IP = '77.239.100.20'
SERVER_PORT = 443  # –û–±—ã—á–Ω–æ 22 –¥–ª—è SSH
SERVER_USERNAME = 'root'
SERVER_PASSWORD = 'HX6qP0WlYzox'
CONFIG_FILE_PATH = '/usr/local/etc/xray/config.json'

bot = telebot.TeleBot(TELEGRAM_TOKEN)
clients={}

def generate_vless_link(user_id,message_chat_id):
    user_uuid = str(uuid.uuid4())
    vless_link = f"vless://{user_uuid}@{SERVER_IP}:443?type=tcp&security=reality&fp=chrome&pbk=6zedx9tc-YP4Lyh8xFp6LtEvvmCB9iAtoNNc3tt5Ons&sni=whatsapp.com&sid=916e9946&spx=%2F&email={user_id}#StudVPN"

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    update_server_config(user_uuid,user_id,message_chat_id)

    return vless_link


def restart_xray(ssh):
    try:
        stdin, stdout, stderr = ssh.exec_command('systemctl restart xray')
        print(stdout.read().decode())
        print(stderr.read().decode())
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ Xray: {e}")


def update_server_config(new_uuid,user_id,message_chat_id):
    user = get_user(user_id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cur_uuid = ""
    fl = 0

    if user and user["uuid"]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è UUID
        fl = 1
        cur_uuid = user["uuid"]  # –ï—Å–ª–∏ –µ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ

    # SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    try:
        ssh.connect(SERVER_IP, username=SERVER_USERNAME, password=SERVER_PASSWORD)
        sftp = ssh.open_sftp()

        with sftp.open(CONFIG_FILE_PATH, 'r') as config_file:
            config = json.load(config_file)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UUID –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if 'inbounds' in config:
            for inbound in config['inbounds']:
                if 'settings' in inbound and 'clients' in inbound['settings']:
                    if fl == 1:
                        for client in inbound['settings']['clients']:
                            if inbound['settings']['clients'][client]['id'] == cur_uuid:
                                inbound['settings']['clients'][client]['id']=new_uuid
                                break
                    else:
                        new_client = {
                            'id': new_uuid
                        }
                        inbound['settings']['clients'].append(new_client)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        with sftp.open(CONFIG_FILE_PATH, 'w') as config_file:
            json.dump(config, config_file, indent=4)

        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Xray –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        restart_xray(ssh)

        sftp.close()
        ssh.close()
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UUID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if fl == 0:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π
            if add_user(user_id, new_uuid):
                bot.send_message(message_chat_id, "–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            else:
                update_user_uuid(user_id, new_uuid)
                bot.send_message(message_chat_id, "–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        else:
            update_user_uuid(user_id, new_uuid)  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º uuid
            bot.send_message(message_chat_id, "–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")


@bot.message_handler(commands=['start'])
def start(message):
    welcome_message = (
        "–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à–µ–º –í–ü–ù \n\n"
        "üöÄ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π VPN —É –≤–∞—Å –ø–æ–¥ —Ä—É–∫–æ–π! üîí\n\n"
        "–ó–∞–±—É–¥—å—Ç–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞—Ö –∏ –ø–ª–æ—Ö–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏.\n\n"
        "–° –Ω–∞—à–∏–º –±–æ—Ç–æ–º —É –≤–∞—Å –±—É–¥–µ—Ç: \n"
        "*   –°–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å\n"
        "*   –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö\n"
        "*   –£–¥–æ–±–Ω—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n"
        "*   –ó–∞—â–∏—Ç–∞ –≤ –ø—É–±–ª–∏—á–Ω—ã—Ö Wi-Fi —Å–µ—Ç—è—Ö"
    )
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º user_id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ö—É–ø–∏—Ç—å VPN", "–ú–æ–π VPN", "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    bot.send_message(message.chat.id, welcome_message, reply_markup=markup)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å VPN"
@bot.message_handler(func=lambda message: message.text == "–ö—É–ø–∏—Ç—å VPN")
def buy_vpn(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("iPhone", "Android", "MacBook", "Windows" "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –í–ü–ù:", reply_markup=markup)



@bot.message_handler(func=lambda message: message.text in ["iPhone", "Android", "MacBook", "Windows"])
def choose_mod(message):
    device = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("1 –º–µ—Å—è—Ü - 99‚ÇΩ", "3 –º–µ—Å—è—Ü–∞ - 259‚ÇΩ", "6 –º–µ—Å—è—Ü–µ–≤ - 499‚ÇΩ", "12 –º–µ—Å—è—Ü–µ–≤ - 999‚ÇΩ", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    bot.send_message(message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {device}. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=markup)



@bot.message_handler(func=lambda message: message.text == "1 –º–µ—Å—è—Ü - 99‚ÇΩ")
def choose_subscription_duration_mounth(message):
    #–æ–ø–ª–∞—Ç–∞
    user_id = message.from_user.id  #
    vless_link = generate_vless_link(user_id,message.chat.id)
    user = get_user(user_id)
    if(user["is_paid"]==0):
        update_user_payment_status( user_id, 1)
        cur_time=user["subscription_end_time"]
        if cur_time:
            cur_time = cur_time + timedelta(days=30)
        else:
            cur_time = datetime.now() + timedelta(days=30)
        update_user_subscription_end_time(user_id, cur_time)
    else:
        cur_time = user["subscription_end_time"]
        update_user_subscription_end_time(user_id, cur_time + timedelta(days=30))
    bot.send_message(message.chat.id, f"–í–∞—à–∞ VLESS —Å—Å—ã–ª–∫–∞:")
    bot.send_message(message.chat.id, vless_link)
    user = get_user(user_id)
    formatted_time = format_subscription_end_time(user["subscription_end_time"])
    bot.send_message(message.chat.id, f"–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: {formatted_time}")



#–ù–∞ 3 –º–µ—Å—è—Ü–∞
@bot.message_handler(func=lambda message: message.text == "3 –º–µ—Å—è—Ü–∞ - 259‚ÇΩ")
def choose_subscription_duration_tree_mounth(message):
    user_id = message.from_user.id  #
    vless_link = generate_vless_link(user_id, message.chat.id)
    user = get_user(user_id)
    if (user["is_paid"] == 0):
        update_user_payment_status(user_id, 1)
        cur_time = user["subscription_end_time"]
        if cur_time:
            cur_time = cur_time + timedelta(days=90)
        else:
            cur_time = datetime.now() + timedelta(days=90)
        update_user_subscription_end_time(user_id, cur_time)
    else:
        cur_time = user["subscription_end_time"]
        update_user_subscription_end_time(user_id, cur_time + timedelta(days=90))
    bot.send_message(message.chat.id, f"–í–∞—à–∞ VLESS —Å—Å—ã–ª–∫–∞:")
    bot.send_message(message.chat.id, vless_link)

#–ù–∞ 180 –¥–Ω–µ–π
@bot.message_handler(func=lambda message: message.text == "6 –º–µ—Å—è—Ü–µ–≤ - 499‚ÇΩ")
def choose_subscription_duration_six_mounth(message):
    user_id = message.from_user.id  #
    vless_link = generate_vless_link(user_id, message.chat.id)
    user = get_user(user_id)
    if (user["is_paid"] == 0):
        update_user_payment_status(user_id, 1)
        cur_time = user["subscription_end_time"]
        if cur_time:
            cur_time = cur_time + timedelta(days=180)
        else:
            cur_time = datetime.now() + timedelta(days=180)
        update_user_subscription_end_time(user_id, cur_time)
    else:
        cur_time = user["subscription_end_time"]
        update_user_subscription_end_time(user_id, cur_time + timedelta(days=180))
    bot.send_message(message.chat.id, f"–í–∞—à–∞ VLESS —Å—Å—ã–ª–∫–∞:")
    bot.send_message(message.chat.id, vless_link)


@bot.message_handler(func=lambda message: message.text == "12 –º–µ—Å—è—Ü–µ–≤ - 999‚ÇΩ")
def choose_subscription_duration_year(message):
    user_id = message.from_user.id  #
    vless_link = generate_vless_link(user_id, message.chat.id)
    user = get_user(user_id)
    if (user["is_paid"] == 0):
        update_user_payment_status(user_id, 1)
        cur_time = user["subscription_end_time"]
        if cur_time:
            cur_time = cur_time + timedelta(days=360)
        else:
            cur_time = datetime.now() + timedelta(days=360)
        update_user_subscription_end_time(user_id, cur_time)
    else:
        cur_time = user["subscription_end_time"]
        update_user_subscription_end_time(user_id, cur_time + timedelta(days=360))
    bot.send_message(message.chat.id, f"–í–∞—à–∞ VLESS —Å—Å—ã–ª–∫–∞:")
    bot.send_message(message.chat.id, vless_link)


#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ù–∞–∑–∞–¥"
@bot.message_handler(func=lambda message: message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def back_to_main_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ö—É–ø–∏—Ç—å VPN", "–ú–æ–π VPN", "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    bot.send_message(message.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=markup)



#–ú–æ–π –í–ü–ù, –Ω–∞–¥–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å SQL —á—Ç–æ–± –Ω–æ—Ä–º–∞–ª—å–Ω–æ —á–∏—Ç–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@bot.message_handler(func=lambda message: message.text == "–ú–æ–π VPN")
def my_vpn(message):
    user_id = message.from_user.id
    if user_id in clients:
        current_uuid = clients[user_id]
        bot.send_message(message.chat.id, f"–í–∞—à —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω: {current_uuid}")
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.", reply_markup=markup)



#–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞
@bot.message_handler(func=lambda message: message.text == "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")
def referral_program(message):
    user_name = message.from_user.username
    referral_link = f"https://t.me/studvpn666_bot?start={user_name}"
    bot.send_message(message.chat.id, f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {referral_link}")
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)




#–ü–æ–¥–¥–µ—Ä–∂–∫–∞
@bot.message_handler(func=lambda message: message.text == "–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
def support(message):
    bot.send_message(message.chat.id, "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç. –í–∞–º –æ—Ç–≤–µ—Ç–∏—Ç –ø–µ—Ä–≤—ã–π –æ—Å–≤–æ–±–æ–¥–∏–≤—à–∏–π—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä")
    bot.send_message(message.chat.id, "–í–∞–º –æ—Ç–≤–µ—Ç–∏—Ç –ø–µ—Ä–≤—ã–π –æ—Å–≤–æ–±–æ–¥–∏–≤—à–∏–π—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä")
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add( "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    bot.send_message(message.chat.id, "@gblev", reply_markup=markup)




# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True, interval=0)
init_db()