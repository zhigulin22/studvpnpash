import telebot, json, time
from telebot.async_telebot import AsyncTeleBot
import asyncssh
import aiofiles
import asyncio
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import uuid
import json
import aiogram
import time
from ukassa import *
import datetime
import threading
import sqlite3
import paramiko
import logging
import asyncio, asyncssh
logging.getLogger('asyncssh').setLevel(logging.WARNING)
from telebot import types
from datetime import datetime, timedelta
from database_utils import create_database, get_message_id_by_telegram_id, update_referrer_id,add_user, get_referrer_id, format_subscription_end_time,add_device,get_user_referral_count,get_device_subscription_end_time, delete_user, delete_device, get_device_payment_status,get_device_uuid,update_device_status, update_referral_count,get_user_data,get_all_users,check_user_exists
#logging.basicConfig(level=logging.DEBUG)
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TELEGRAM_TOKEN = '8098756212:AAHCMSbVibz1P-RLwQvSZniKZCIQo8DkD9E'
SERVER_IP = '77.239.100.20'
DATABASE_FILE = "vpn_keys.db"
SERVER_PORT = 443  # –û–±—ã—á–Ω–æ 22 –¥–ª—è SSH
SERVER_USERNAME = 'root'
SERVER_PASSWORD = 'HX6qP0WlYzox'
CONFIG_FILE_PATH = '/usr/local/etc/xray/config.json'
UUID_KEYWORD = "id: "

bot = AsyncTeleBot(TELEGRAM_TOKEN)

logging.basicConfig(
     format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

last_message_ids = {}
user_payment_status = {}

async def get_vless_link(user_id,device_type):
    user_uuid_from_device = await get_device_uuid(user_id,device_type)
    vless_link = f"vless://{user_uuid_from_device}@{SERVER_IP}:443?type=tcp&security=reality&fp=chrome&pbk=6zedx9tc-YP4Lyh8xFp6LtEvvmCB9iAtoNNc3tt5Ons&sni=whatsapp.com&sid=916e9946&spx=%2F&email={user_id}#HugVPN_{device_type}"
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    return vless_link


async def send_message_with_deletion(chat_id, text,reply_markup=None):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if chat_id in last_message_ids:
        try:
            await bot.delete_message(chat_id, last_message_ids[chat_id])
        except Exception as e:
            print(f"Error deleting message: {e}")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    new_message = await bot.send_message(chat_id, text,reply_markup=reply_markup)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    last_message_ids[chat_id] = new_message.message_id



async def send_message_with_deletion_parse(chat_id, text, parsemod):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if chat_id in last_message_ids:
        try:
            await bot.delete_message(chat_id, last_message_ids[chat_id])
        except Exception as e:
            print(f"Error deleting message: {e}")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    new_message = await bot.send_message(chat_id, text,parse_mode=parsemod)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    last_message_ids[chat_id] = new_message.message_id



async def generate_vless_link_for_buy(user_id,message_chat_id,device_type):
    user_uuid = await get_device_uuid(user_id,device_type)
    vless_link = f"vless://{user_uuid}@{SERVER_IP}:443?type=tcp&security=reality&fp=chrome&pbk=6zedx9tc-YP4Lyh8xFp6LtEvvmCB9iAtoNNc3tt5Ons&sni=whatsapp.com&sid=916e9946&spx=%2F&email={user_id}#HugVPN_{device_type}"

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    await update_config_on_server(user_uuid)
    return vless_link


async def restart_xray(ssh):
    try:
        result = await ssh.run('systemctl restart xray',check=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ Xray: {e}")




async def remove_uuid_from_config(config_file, uuid_to_remove, uuid_keyword=UUID_KEYWORD):
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º UUID –∏–∑ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    try:
        # SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
        async with asyncssh.connect(SERVER_IP, username=SERVER_USERNAME, password=SERVER_PASSWORD) as ssh:

            async with ssh.start_sftp_client() as sftp:
                # –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
                async with sftp.open(CONFIG_FILE_PATH, 'r') as config_file:
                    content = await config_file.read()  # –ß–∏—Ç–∞–µ–º –≤–µ—Å—å —Ñ–∞–π–ª
                    lines = content.splitlines(keepends=True)
                if not lines:
                    return False  # Config file empty or not found

                updated_lines = []
                uuid_str = str(uuid_to_remove) # converting UUID to a string

                fl=0

                for line in lines:
                    if fl==1:
                        fl=0
                        continue
                    if  uuid_str not in line: # Check also for the UUID Keyword
                        updated_lines.append(line)
                    if uuid_str in line:
                        fl=1
                        updated_lines.pop()

                async with sftp.open(CONFIG_FILE_PATH, 'w') as config_file:
                    await config_file.write(''.join(updated_lines))

                await restart_xray(ssh)

    except Exception as e:
        print(f"Error writing config file: {e}")
        return False

#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ Uuid –≤ –∫–æ–Ω—Ñ–∏–≥
async def update_config_on_server(new_uuid):
    try:
        # SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
        async with asyncssh.connect(SERVER_IP, username=SERVER_USERNAME, password=SERVER_PASSWORD) as ssh:

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º SFTP-—Å–µ—Å—Å–∏—é
            async with ssh.start_sftp_client() as sftp:
                # –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
                async with sftp.open(CONFIG_FILE_PATH, 'r') as config_file:
                    content = await config_file.read()
                    config = json.loads(content)

                # –û–±–Ω–æ–≤–ª—è–µ–º UUID –≤ –∫–æ–Ω—Ñ–∏–≥–µ
                if 'inbounds' in config:
                    for inbound in config['inbounds']:
                        if 'settings' in inbound and 'clients' in inbound['settings']:
                            new_client = {'id': new_uuid}
                            inbound['settings']['clients'].append(new_client)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
                async with sftp.open(CONFIG_FILE_PATH, 'w') as config_file:
                    await config_file.write(json.dumps(config, indent=4))

            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Xray –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞
            await restart_xray(ssh)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")


async def dop_free_days(user_id, col_days):
    referrer_id = await get_referrer_id(user_id)
    if referrer_id == 0:
        return
    device_comb=["iPhone", "Android", "Mac", "Windows"]
    for device in device_comb:
        cur_time_end = await get_device_subscription_end_time(user_id, device)
        if cur_time_end != "None":
            cur_time_end_new_format = datetime.fromisoformat(cur_time_end)
            cur_time_end_new_format = cur_time_end_new_format + timedelta(days=col_days)
            cur_status=await get_device_payment_status(user_id, device)
            device_uuid = await get_device_uuid(user_id, device)
            await update_device_status(device_uuid, device, cur_time_end_new_format)
            if not cur_status:
                await update_config_on_server(device_uuid)
        else:
            cur_time_end = datetime.now() + timedelta(days=col_days)
            device_uuid = await get_device_uuid(user_id, device)
            cur_status = await get_device_payment_status(user_id, device)
            await update_device_status(device_uuid, device, cur_time_end)
            if not cur_status:
                await update_config_on_server(device_uuid)
    if referrer_id is None:
        return
    for device in device_comb:
        cur_time_end = await get_device_subscription_end_time(referrer_id, device)
        if cur_time_end != "None":
            cur_time_end_new_format = datetime.fromisoformat(cur_time_end)
            cur_time_end_new_format = cur_time_end_new_format + timedelta(days=col_days)
            cur_status = await get_device_payment_status(user_id, device)
            device_uuid = await get_device_uuid(referrer_id, device)
            await update_device_status(device_uuid, device, cur_time_end_new_format)
            if not cur_status:
                await update_config_on_server(device_uuid)
        else:
            cur_time_end = datetime.now() + timedelta(days=col_days)
            device_uuid = await get_device_uuid(referrer_id, device)
            cur_status = await get_device_payment_status(user_id, device)
            await update_device_status(device_uuid, device, cur_time_end)
            if not cur_status:
                await update_config_on_server(device_uuid)



#–ù–∞–ø–∏—á–∞—Ç—å –≤ —á–∞—Ç –ª—é–¥—è–º –æ —Ç–æ–º, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ –∫—É–ø–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
async def user_has_payed_in_bot_be_link(user_id,user_name):
    referrer_id = await get_referrer_id(user_id)
    chat_id_from_sender = await get_message_id_by_telegram_id(referrer_id)
    await send_message_with_deletion(chat_id_from_sender, f"üòé–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –æ—Ñ–æ—Ä–º–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–æ—Ç–µ –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.\n üéÅ–í–∞–º –±—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ –∑–∞ —ç—Ç–æ 14 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.üéÅ")
    chat_id_from_recipient = await get_message_id_by_telegram_id(user_id)
    await send_message_with_deletion(chat_id_from_recipient, "üéÅ–í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ 14 —Å—É—Ç–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—à–∏–º –í–ü–ù –Ω–∞ –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –∑–∞ –æ–ø–ª–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µüéÅ")
    cur_ref_col = await get_user_referral_count(referrer_id)
    cur_ref_col = cur_ref_col + 1
    await update_referral_count(referrer_id, cur_ref_col)
    await update_referrer_id(user_id,0)


#–ù–∞–ø–∏—á–∞—Ç—å –≤ —á–∞—Ç –ª—é–¥—è–º –æ —Ç–æ–º, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
async def user_has_registered_in_bot_be_link(user_id,user_name):
    referrer_id = await get_referrer_id(user_id)
    chat_id_from_sender = await get_message_id_by_telegram_id(referrer_id)
    await send_message_with_deletion(chat_id_from_sender, f"üòé–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ –±–æ—Ç–µ –∏ –≤–∞–º –±—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ –∑–∞ —ç—Ç–æ 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.")
    chat_id_from_recipient = await get_message_id_by_telegram_id(user_id)
    await send_message_with_deletion(chat_id_from_recipient, "üéÅ–í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ 7 —Å—É—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—à–∏–º –í–ü–ù –Ω–∞ –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –±–æ—Ç–µ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µüéÅ")


#–ù–∞–ø–∏—Å–∞—Ç—å —Å–ª–æ–≤–∞ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏
async def user_has_registered_in_bot(user_id):
    chat_id_from_recipient = await get_message_id_by_telegram_id(user_id)
    await send_message_with_deletion(chat_id_from_recipient, "üéÅ–í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ 14 —Å—É—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—à–∏–º –í–ü–ù –Ω–∞ –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –±–æ—Ç–µüéÅ")


#–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
async def start(message):
    user_name = message.from_user.first_name
    welcome_message = (
        f"{user_name}, —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à–µ–º –í–ü–ù \n\n"
        """–û—á–µ–Ω—å —á–∞—Å—Ç–æ –ø—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ VPN –≤–æ–∑–Ω–∏–∫–∞—é—Ç –ø—Ä–æ–±–ª–µ–º—ã:
ü§¨ –ó–∞–≤–∏—Å–∞—é—â–µ–µ –≤–∏–¥–µ–æ
üò• –ë–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞
üò° –£—Ç–µ—á–∫–∞ –¥–∞–Ω–Ω—ã—Ö
üò± –†–∏—Å–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–∑-–∑–∞ —á–∞—Å—Ç–æ–π —Å–º–µ–Ω—ã IP-–∞–¥—Ä–µ—Å–∞

–ù–æ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å HugVPN –∏ –≤—Å–µ–≥–æ —ç—Ç–æ–≥–æ –Ω–µ –±—É–¥–µ—Çüëç
üíµ2.5 —Ä—É–±–ª—è/–¥–µ–Ω—å - –º–∞–ª–æ —á—Ç–æ —Å–µ–π—á–∞—Å –º–æ–∂–Ω–æ –≤–∑—è—Ç—å –∑–∞ —Ç–∞–∫—É—é —Ü–µ–Ω—É) 

ü§ô–¢–∞–∫–∂–µ —É –Ω–∞—Å –æ—á–µ–Ω—å –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–Ω–æ –æ—á–µ–Ω—å –ª–µ–≥–∫–æ –Ω–∞–±—Ä–∞—Ç—å –ø–æ–ª–≥–æ–¥–∞ –∏ –¥–∞–∂–µ –±–æ–ª—å—à–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
"""
    )
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º user_id
    referrer = None
    if " " in message.text:
        referrer_candidate = message.text.split()[1]
        try:
            referrer_candidate = int(referrer_candidate)
            if user_id != referrer_candidate:
                referrer = referrer_candidate
        except ValueError:
            pass

    if not await check_user_exists(user_id):
        await add_user(user_id, message.chat.id, 0, referrer)
        await add_device(user_id, 1,"iPhone",False,"None")
        await add_device(user_id, 2, "Mac", False, "None")
        await add_device(user_id, 3, "Android", False, "None")
        await add_device(user_id, 4, "Windows", False, "None")
        if referrer is not None:
            await dop_free_days(user_id, 7)
            await user_has_registered_in_bot_be_link(user_id, user_name)
        else:
            await dop_free_days(user_id, 3)
            await user_has_registered_in_bot(user_id)
    # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å VPN", callback_data='buy_vpn')
    button2 = types.InlineKeyboardButton("üíº –ú–æ–π VPN", callback_data='my_vpn')
    button3 = types.InlineKeyboardButton("üéÅ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å", callback_data='referral')
    button4 = types.InlineKeyboardButton("‚òéÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/HugVPN_support")
    button5 = types.InlineKeyboardButton("üåê –û —Å–µ—Ä–≤–∏—Å–µ", callback_data='service')
    button6 = types.InlineKeyboardButton("üìé –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data='instruction')
    markup.add(button1,button2)
    markup.add(button3,button5)
    markup.add(button4,button6)

    await bot.send_message(message.chat.id, welcome_message, reply_markup=markup)



#–í—ã–¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å
@bot.callback_query_handler(func=lambda call: call.data == "service")
async def buy_vpn(call):
    markup = types.InlineKeyboardMarkup()
    button5 = types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')
    markup.add(button5)
    welcome_message = (
        """
 üåê‚ú®–ú—ã —Å–æ–∑–¥–∞–ª–∏ —ç—Ç–æ–≥–æ –±–æ—Ç–∞, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏:

- –õ–µ–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∫ VPN –∏ –≥–ª–∞–≤–Ω–æ–µ –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã.
- –ó–∞—â–∏—â–∞—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –≥–ª–∞–∑ —Å –ø–æ–º–æ—â—å—é —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è.
- –≠–∫–æ–Ω–æ–º–∏—Ç—å –≤—Ä–µ–º—è ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –≤—Å–µ–≥–æ –ø–∞—Ä—É –∫–ª–∏–∫–æ–≤, –∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∏–º–∞—Ç—å 1 –∫–Ω–æ–ø–∫—É!

–ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç HugVPN?
üí∞ –û–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ (2.5 —Ä—É–±–ª—è/–¥–µ–Ω—å)
üöÄ –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: –Ω–∏–∫–∞–∫–∏—Ö —Ç–æ—Ä–º–æ–∑–æ–≤, —Ç–æ–ª—å–∫–æ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π —Å–µ—Ä—Ñ–∏–Ω–≥.
üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–≥–¥–∞ –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π.
üåç –ì–ª–æ–±–∞–ª—å–Ω–æ—Å—Ç—å: —Ä–∞—Å—à–∏—Ä—è–µ–º —Å–µ—Ç—å —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ .
üí¨ –£–¥–æ–±—Å—Ç–≤–æ: –≤—Å—ë, —á—Ç–æ –Ω—É–∂–Ω–æ, —ç—Ç–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É.

–ù–∞—à–∞ –º–∏—Å—Å–∏—è ‚Äî —Å–¥–µ–ª–∞—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∏ –±—ã—Å—Ç—Ä—ã–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ HugVPN –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –æ—â—É—Ç–∏—Ç–µ —Ä–∞–∑–Ω–∏—Ü—É! üòä
"""
    )
    await send_message_with_deletion(call.message.chat.id,welcome_message,reply_markup=markup)



#–ö–Ω–æ–ø–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –Ω–∞–¥–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
@bot.callback_query_handler(func=lambda call: call.data == "instruction")
async def buy_vpn(call):
    markup = types.InlineKeyboardMarkup()
    button5 = types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')
    markup.add(button5)
    await send_message_with_deletion(call.message.chat.id,"–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é:",reply_markup=markup)




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å VPN"
@bot.callback_query_handler(func=lambda call: call.data == "buy_vpn")
async def buy_vpn(call):
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("üì± iPhone", callback_data='iPhone')
    button2 = types.InlineKeyboardButton("üì≤ Android", callback_data='Android')
    button3 = types.InlineKeyboardButton("üíª Mac", callback_data='Mac')
    button4 = types.InlineKeyboardButton("üñ•Ô∏è Windows", callback_data='Windows')
    button5 = types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')
    markup.add(button1, button2)
    markup.add(button3, button4)
    markup.add(button5)
    await send_message_with_deletion(call.message.chat.id,"–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –í–ü–ù:", markup)




@bot.callback_query_handler(func=lambda call: call.data in ["iPhone", "Android", "Mac", "Windows"])
async def choose_mod(call):
    device = call.data
    user_id = call.from_user.id
    user_status_device = await get_device_payment_status(user_id, device)
    if user_status_device is True:
        user_endtime_device = await get_device_subscription_end_time(user_id, device)
        user_endtime_device_str = await format_subscription_end_time(str(user_endtime_device))
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("‚è≥ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='proceed_subscription')
        button2 = types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')
        markup.add(button1)
        markup.add(button2)
        await send_message_with_deletion(call.message.chat.id, f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è {device} üü¢.\n\n–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {device}: {user_endtime_device_str}\n\n–•–æ—Ç–∏—Ç–µ –µ–µ –ø—Ä–æ–¥–ª–∏—Ç—å?",markup)
    else:
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("- 1 –º–µ—Å—è—Ü - 99‚ÇΩ", callback_data=f'1month1|{device}')
        button2 = types.InlineKeyboardButton("- 3 –º–µ—Å—è—Ü–∞ - 255‚ÇΩ (-15%)", callback_data=f'3month1|{device}')
        button3 = types.InlineKeyboardButton("- 6 –º–µ—Å—è—Ü–µ–≤ - 480‚ÇΩ (-20%)", callback_data=f'6month1|{device}')
        button4 = types.InlineKeyboardButton("- 12 –º–µ—Å—è—Ü–µ–≤ - 999‚ÇΩ (-25%)", callback_data=f'12month1|{device}')
        button5 = types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')
        markup.add(button1)
        markup.add(button2)
        markup.add(button3)
        markup.add(button4)
        markup.add(button5)

        await send_message_with_deletion(call.message.chat.id,f"üìÜ –í—ã –≤—ã–±—Ä–∞–ª–∏ {device}. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:", markup)



#–û–ø–ª–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("1month1") or call.data.startswith("3month1") or call.data.startswith("6month1") or call.data.startswith("12month1"))
async def choose_subscription_duration_mounth(call):
    user_name=call.from_user.name
    data = call.data.split("|")
    subscription_duration = data[0]
    device = data[1]
    cur_time = 0
    user_id = call.from_user.id  #
    sub = ""
    amount = 0
    if subscription_duration == "1month1":
        cur_time = 31
        amount = 99
        sub = "1 –º–µ—Å—è—Ü"
    elif subscription_duration == "3month1":
        cur_time = 91
        amount = 255
        sub = "3 –º–µ—Å—è—Ü–∞"
    elif subscription_duration == "6month1":
        cur_time = 181
        amount = 480
        sub = "6 –º–µ—Å—è—Ü–µ–≤"
    elif subscription_duration == "12month1":
        cur_time = 361
        amount = 899
        sub = "12 –º–µ—Å—è—Ü–µ–≤"
    user_status_device = await get_device_payment_status(user_id, device)
    markup1 = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data='cancel_pay')
    markup1.add(button1)
    markup = types.InlineKeyboardMarkup()
    button2 = types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')
    markup.add(button2)
    user_payment_status[user_id] = {'status': 'pending', 'attempts': 0}
    if user_status_device is False:
        user_id = call.from_user.id
        plan_text = call.data
        description = f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {sub}."
        # üì§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –ÆKassa
        payment_link, payment_id = await create_payment(amount, description)
        if payment_link:
            await send_message_with_deletion(call.message.chat.id, text=f"üëá –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{payment_link}",reply_markup=markup1)

            attempts = 0
            max_attempts = 120  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç
            while attempts < max_attempts:
                if user_payment_status[user_id]['status'] == 'canceled':
                    return
                status = await check_payment_status(payment_id)
                if status == 'succeeded':
                    cur_time_end = datetime.now() + timedelta(days=cur_time)
                    device_uuid = await get_device_uuid(user_id, device)
                    vless_link = await generate_vless_link_for_buy(user_id, call.message.chat.id, device)
                    await update_device_status(device_uuid, True, cur_time_end)
                    await bot.send_message(call.message.chat.id, text=f"ü´∂ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ\n\nüîë –í–∞—à–∞ VLESS —Å—Å—ã–ª–∫–∞ –¥–ª—è {device}: ```{vless_link}```",parse_mode='MarkdownV2')
                    #user_endtime_device = get_device_subscription_end_time(user_id, device)
                    #update_device_status(device_uuid, True, user_endtime_device)
                    #cur_time_end = format_subscription_end_time(cur_time_end)
                    await dop_free_days(user_id,14)
                    await user_has_payed_in_bot_be_link(user_id,user_name)
                    cur_time = await get_device_subscription_end_time(user_id, device)
                    cur_time_end1 = await format_subscription_end_time(str(cur_time))
                    await send_message_with_deletion(call.message.chat.id,f"‚è≥ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {device}: {cur_time_end1}",reply_markup=markup)
                    break
                elif status == 'canceled':
                    await send_message_with_deletion(call.message.chat.id, text="‚ùå –ü–ª–∞—Ç—ë–∂ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω.",reply_markup=markup)
                    break
                else:
                    await asyncio.sleep(5)
                    attempts += 1

            if attempts == max_attempts:
                await send_message_with_deletion(call.message.chat.id, text="‚ùå–ò—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",reply_markup=markup)
        else:
            await send_message_with_deletion(call.message.chat.id, text="‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ù–∞–∑–∞–¥"
@bot.callback_query_handler(func=lambda call: call.data == "main_menu")
async def back_to_main_menu(call):
    user_name = call.from_user.first_name
    welcome_message = (
        f"{user_name}, —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à–µ–º –í–ü–ù \n\n"
        """–û—á–µ–Ω—å —á–∞—Å—Ç–æ –ø—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ VPN –≤–æ–∑–Ω–∏–∫–∞—é—Ç –ø—Ä–æ–±–ª–µ–º—ã:
ü§¨ –ó–∞–≤–∏—Å–∞—é—â–µ–µ –≤–∏–¥–µ–æ
üò• –ë–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞
üò° –£—Ç–µ—á–∫–∞ –¥–∞–Ω–Ω—ã—Ö
üò± –†–∏—Å–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–∑-–∑–∞ —á–∞—Å—Ç–æ–π —Å–º–µ–Ω—ã IP-–∞–¥—Ä–µ—Å–∞

–ù–æ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å HugVPN –∏ –≤—Å–µ–≥–æ —ç—Ç–æ–≥–æ –Ω–µ –±—É–¥–µ—Çüëç
üíµ2.5 —Ä—É–±–ª—è/–¥–µ–Ω—å - –º–∞–ª–æ —á—Ç–æ —Å–µ–π—á–∞—Å –º–æ–∂–Ω–æ –≤–∑—è—Ç—å –∑–∞ —Ç–∞–∫—É—é —Ü–µ–Ω—É) 

ü§ô–¢–∞–∫–∂–µ —É –Ω–∞—Å –æ—á–µ–Ω—å –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–Ω–æ –æ—á–µ–Ω—å –ª–µ–≥–∫–æ –Ω–∞–±—Ä–∞—Ç—å –ø–æ–ª–≥–æ–¥–∞ –∏ –¥–∞–∂–µ –±–æ–ª—å—à–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
"""
    )
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å VPN", callback_data='buy_vpn')
    button2 = types.InlineKeyboardButton("üíº –ú–æ–π VPN", callback_data='my_vpn')
    button3 = types.InlineKeyboardButton("üéÅ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å", callback_data='referral')
    button4 = types.InlineKeyboardButton("‚òéÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/HugVPN_support")
    button5 = types.InlineKeyboardButton("üåê –û —Å–µ—Ä–≤–∏—Å–µ", callback_data='service')
    button6 = types.InlineKeyboardButton("üìé –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data='instruction')
    markup.add(button1, button2)
    markup.add(button3, button5)
    markup.add(button4, button6)
    await send_message_with_deletion(call.message.chat.id,welcome_message, markup)

#–£–∑–Ω–∞—Ç—å —Å–≤–æ–π –í–ü–ù
@bot.callback_query_handler(func=lambda call: call.data == "my_vpn")
async def my_vpn(call):
    user_id = call.from_user.id
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("üì± iPhone", callback_data=f'iPhone1|iPhone')
    button2 = types.InlineKeyboardButton("üì≤ Android", callback_data=f'Android1|Android')
    button3 = types.InlineKeyboardButton("üíª Mac", callback_data='Mac1|Mac')
    button4 = types.InlineKeyboardButton("üñ•Ô∏è Windows", callback_data='Windows1|Windows')
    button5 = types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')
    markup.add(button1)
    markup.add(button2)
    markup.add(button3)
    markup.add(button4)
    markup.add(button5)
    await send_message_with_deletion(call.message.chat.id,"üëá –í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Å–≤–æ–π –∫–ª—é—á:", markup)

#–í—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –µ—Å—Ç—å –∫–ª—é—á –∏–ª–∏ –Ω–µ—Ç
@bot.callback_query_handler(func=lambda call: call.data.startswith("iPhone1") or call.data.startswith("Mac1") or call.data.startswith("Android1") or call.data.startswith("Windows1"))
async def learn_key(call):
    data = call.data.split("|")
    up = data[0]
    device = data[1]
    user_id=call.from_user.id
    user_payment_status_device = await get_device_payment_status(user_id, device)
    if user_payment_status_device is True:
        user_end_time=await get_device_subscription_end_time(user_id, device)
        user_endtime_device = await format_subscription_end_time(str(user_end_time))
        current_link = await get_vless_link(user_id, device)
        await bot.send_message(call.message.chat.id, text=f"üëâ –í–∞—à–∞ VLESS —Å—Å—ã–ª–∫–∞ –¥–ª—è {device}: ```{current_link}```", parse_mode='MarkdownV2')
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("‚è≥ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='proceed_subscription')
        button2 = types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')
        markup.add(button1)
        markup.add(button2)
        await send_message_with_deletion(call.message.chat.id, f"""‚è≥ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {device}: {user_endtime_device}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: """, markup)
    else:
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å VPN", callback_data='buy_vpn')
        button2 = types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')
        markup.add(button1)
        markup.add(button2)
        await send_message_with_deletion(call.message.chat.id, f"üö® –£ –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–∞ –¥–ª—è {device}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", markup)




#–í—ã–±–æ—Ä —É—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data == "proceed_subscription")
async def phone_to_proceed(call):
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("üì± iPhone", callback_data=f'iPhone2|iPhone')
        button2 = types.InlineKeyboardButton("üì≤ Android", callback_data=f'Android2|Android')
        button3 = types.InlineKeyboardButton("üíª Mac", callback_data=f'Mac2|Mac')
        button4 = types.InlineKeyboardButton("üñ•Ô∏è Windows", callback_data=f'Windows2|Windows')
        button5 = types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')
        markup.add(button1)
        markup.add(button2)
        markup.add(button3)
        markup.add(button4)
        markup.add(button5)
        await send_message_with_deletion(call.message.chat.id,"üëá –í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å —Å–≤–æ–π –∫–ª—é—á:", markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("iPhone2") or call.data.startswith("Mac2") or call.data.startswith("Android2") or call.data.startswith("Windows2"))
async def time_to_proceed(call):
    data = call.data.split("|")
    up = data[0]
    device = data[1]
    user_id = call.from_user.id
    user_status_device = await get_device_payment_status(user_id, device)
    if user_status_device is True:
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("- 1 –º–µ—Å—è—Ü - 99‚ÇΩ", callback_data=f'1month2|{device}')
        button2 = types.InlineKeyboardButton("- 3 –º–µ—Å—è—Ü–∞ - 255‚ÇΩ (-15%)", callback_data=f'3month2|{device}')
        button3 = types.InlineKeyboardButton("- 6 –º–µ—Å—è—Ü–µ–≤ - 480‚ÇΩ (-20%)", callback_data=f'6month2|{device}')
        button4 = types.InlineKeyboardButton("- 12 –º–µ—Å—è—Ü–µ–≤ - 899‚ÇΩ (-25$)", callback_data=f'12month2|{device}')
        button5 = types.InlineKeyboardButton("üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')
        markup.add(button1)
        markup.add(button2)
        markup.add(button3)
        markup.add(button4)
        markup.add(button5)

        await send_message_with_deletion(call.message.chat.id,f"üìÜ –í—ã –≤—ã–±—Ä–∞–ª–∏ {device}. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å :", markup)
    else:
        await send_message_with_deletion(call.message.chat.id, f"üö® –£ –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–∞ –¥–ª—è {device}")
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å VPN", callback_data='buy_vpn')
        button2 = types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')
        markup.add(button1)
        markup.add(button2)
        await send_message_with_deletion(call.message.chat.id, "üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", markup)

#–û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞
@bot.callback_query_handler(func=lambda call: call.data == "cancel_pay")
async def cancel_pay(call):
    user_id=call.from_user.id
    user_name = call.from_user.first_name
    welcome_message = (
        f"{user_name}, —Ç–≤–æ–π –ø–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω ‚ùå"
    )
    if user_id in user_payment_status and user_payment_status[user_id]['status'] == 'pending':
        user_payment_status[user_id]['status'] = 'canceled'
    else:
        await send_message_with_deletion(call.message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å VPN", callback_data='buy_vpn')
    button2 = types.InlineKeyboardButton("üíº –ú–æ–π VPN", callback_data='my_vpn')
    button3 = types.InlineKeyboardButton("üéÅ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å", callback_data='referral')
    button4 = types.InlineKeyboardButton("‚òéÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/HugVPN_support")
    button5 = types.InlineKeyboardButton("üåê –û —Å–µ—Ä–≤–∏—Å–µ", callback_data='service')
    button6 = types.InlineKeyboardButton("üìé –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data='instruction')
    markup.add(button1, button2)
    markup.add(button3, button5)
    markup.add(button4, button6)
    await send_message_with_deletion(call.message.chat.id, welcome_message, markup)



#–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("1month2") or call.data.startswith("3month2") or call.data.startswith("6month2") or call.data.startswith("12month2"))
async def pay_to_proceed(call):
    data = call.data.split("|")
    subscription_duration = data[0]
    device = data[1]
    cur_time = 0
    user_id = call.from_user.id  #
    amount = 0
    sub = ""
    if subscription_duration == "1month2":
        cur_time = 31
        amount = 99
        sub = "1 –º–µ—Å—è—Ü"
    elif subscription_duration == "3month2":
        cur_time = 91
        amount = 255
        sub = "3 –º–µ—Å—è—Ü–∞"
    elif subscription_duration == "6month2":
        cur_time = 181
        amount = 480
        sub = "6 –º–µ—Å—è—Ü–µ–≤"
    elif subscription_duration == "12month2":
        cur_time = 361
        amount = 899
        sub = "12 –º–µ—Å—è—Ü–µ–≤"
    user_status_device = await get_device_payment_status(user_id, device)
    markup1 = types.InlineKeyboardMarkup()
    button4 = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data='cancel_pay')
    markup1.add(button4)
    markup = types.InlineKeyboardMarkup()
    button2 = types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')
    markup.add(button2)
    user_payment_status[user_id] = {'status': 'pending', 'attempts': 0}
    if user_status_device is True:
        user_id = call.from_user.id
        plan_text = call.data
        description = f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {sub}."

        # üì§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –ÆKassa
        payment_link, payment_id = await create_payment(amount, description)
        if payment_link:
            await send_message_with_deletion(call.message.chat.id, f"üëá –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{payment_link}",reply_markup=markup1)
            attempts = 0
            max_attempts = 120  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç
            while attempts < max_attempts:
                if user_payment_status[user_id]['status'] == 'canceled':
                    break
                status = await check_payment_status(payment_id)
                if status == 'succeeded':
                    cur_time_end = await get_device_subscription_end_time(user_id, device)
                    cur_time_end = datetime.fromisoformat(cur_time_end)
                    cur_time_end = cur_time_end + timedelta(days=cur_time)
                    device_uuid = await get_device_uuid(user_id, device)
                    await update_device_status(device_uuid, device, cur_time_end)
                    vless_link = await get_vless_link(user_id, device)
                    await bot.send_message(call.message.chat.id, text=f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ\n\nüîë –í–∞—à–∞ VLESS —Å—Å—ã–ª–∫–∞ –¥–ª—è {device}: ```{vless_link}```", parse_mode='MarkdownV2')
                    user_endtime_device = await get_device_subscription_end_time(user_id, device)
                    user_endtime_device_str = await format_subscription_end_time(str(user_endtime_device))
                    await send_message_with_deletion(call.message.chat.id,f"‚è≥ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {device}: {user_endtime_device_str}",reply_markup=markup)
                    break
                elif status == 'canceled':
                    print(4)
                    await send_message_with_deletion(call.message.chat.id, text="‚ùå –ü–ª–∞—Ç—ë–∂ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω.")
                    break
                else:
                    await asyncio.sleep(5)
                    attempts += 1

            print(1)
            if attempts == max_attempts:
                await send_message_with_deletion(call.message.chat.id, text="‚ùå–ò—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",reply_markup=markup)
        else:
            await send_message_with_deletion(call.message.chat.id, text="‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",reply_markup=markup)



#–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞
@bot.callback_query_handler(func=lambda call: call.data == "referral")
async def referral_program(call):
    user_name = call.from_user.id
    referral_link = f"https://t.me/@HugVPN_bot?start={user_name}"
    markup = types.InlineKeyboardMarkup()
    button1=types.InlineKeyboardButton("üëâ –£–∑–Ω–∞—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data='col_ref')
    button2 = types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')
    markup.add(button1)
    markup.add(button2)
    await send_message_with_deletion(call.message.chat.id, f"ü§ô –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {referral_link}\n\n1Ô∏è‚É£ –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–∞–∂–º–µ—Ç –∫–Ω–æ–ø–∫—É Start –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ, –≤–∞–º –∏ –µ–º—É –Ω–∞—á–∏—Å–ª–∏—Ç—Å—è –ø–æ 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n2Ô∏è‚É£ –ï–µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –æ—Ñ–æ—Ä–º–∏—Ç –ª—é–±—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ, –Ω–∞—á–∏—Å–ª–∏—Ç—Å—è 14 –¥–Ω–µ–π\n–í—Å–µ –¥–Ω–∏ —Å–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è, –ø–æ—ç—Ç–æ–º—É –º–æ–∂–Ω–æ —Ä–∞–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫–∏ –¥—Ä—É–∑—å—è–º –∏ –ø–æ–ª—É—á–∏—Ç—å –≥–æ–¥ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", markup)


@bot.callback_query_handler(func=lambda call: call.data == "col_ref")
async def referral_program(call):
    user_id = call.from_user.id
    user_col_ref = await get_user_referral_count(user_id)
    markup = types.InlineKeyboardMarkup()
    button2 = types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu',reply_markup=markup)
    markup.add(button2)
    await send_message_with_deletion(call.message.chat.id, f"""
        üôã‚Äç‚ôÇÔ∏èüôã‚Äç‚ôÄÔ∏è –ö–æ–ª-–≤–æ —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ –∫—É–ø–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ = {user_col_ref}. 
    """,markup)




#–ü–æ–¥–¥–µ—Ä–∂–∫–∞
@bot.callback_query_handler(func=lambda call: call.data == "support")
async def support(call):
    markup = types.InlineKeyboardMarkup()
    button2 = types.InlineKeyboardButton("üè†–ù–∞–∑–∞–¥", callback_data='main_menu')
    markup.add(button2)
    await send_message_with_deletion(call.message.chat.id, "üëâ–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.\n–í–∞–º –æ—Ç–≤–µ—Ç–∏—Ç –ø–µ—Ä–≤—ã–π –æ—Å–≤–æ–±–æ–¥–∏–≤—à–∏–π—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä\n\n@HugVPN_Support", markup)


@bot.message_handler(commands=['help'])
async def help_command(message):
    await send_message_with_deletion(message.chat.id, """
        üëâ–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.         
–¢–µ–±–µ –æ—Ç–≤–µ—Ç–∏—Ç –ø–µ—Ä–≤—ã–π –æ—Å–≤–æ–±–æ–¥–∏–≤—à–∏–π—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä üë®‚Äçüîß

@HugVPN_Support
    """)




async def setup_menu():
    commands = [
        types.BotCommand("start", "‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        types.BotCommand("help", "‚òéÔ∏è –ü–æ–º–æ—â—å")
    ]
    try:
       await bot.set_my_commands(commands)
       logging.info("–ö–æ–º–∞–Ω–¥—ã –º–µ–Ω—é —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é: {e}")

#–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def check_subscriptions_and_remove_expired():
    try:
        conn = sqlite3.connect('vpn_keys.db')
        cursor = conn.cursor()
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç—ë–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        cursor.execute("""
            SELECT device_uuid, subscription_end_time 
            FROM user_devices 
            WHERE is_paid = 1
            
        """)
        devices = cursor.fetchall()

        now = datetime.now()

        for device_uuid, subscription_end_time in devices:
            if subscription_end_time:
                expiry_date = datetime.strptime(subscription_end_time, "%Y-%m-%d %H:%M:%S.%f")
                if expiry_date < now:
                    print(f"–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ –¥–ª—è UUID: {device_uuid}. –£–¥–∞–ª—è–µ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
                    await remove_uuid_from_config(CONFIG_FILE_PATH, device_uuid)

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
                    cursor.execute("""
                        UPDATE user_devices 
                        SET is_paid = 0, subscription_end_time = NULL
                        WHERE device_uuid = ?
                    """, (device_uuid,))

                cur=now-expiry_date
                if cur.days<3:
                    mes_id=get_message_id_by_telegram_id()
                    bot.send_message()

        conn.commit()
        conn.close()

    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")


async def start_scheduler():
    scheduler = AsyncIOScheduler()
    scheduler.add_job(check_subscriptions_and_remove_expired, 'interval', days=1)
    scheduler.start()
    print("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω.")


async def main():
    await setup_menu()  # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    await create_database()  # –°–æ–∑–¥–∞—ë–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await start_scheduler()  #
    await bot.polling()



if __name__ == '__main__':
    asyncio.run(main())
